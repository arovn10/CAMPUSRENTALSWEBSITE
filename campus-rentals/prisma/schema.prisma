// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  firstName         String
  lastName          String
  password          String   // Hashed password
  role              UserRole @default(INVESTOR)
  company           String?
  phone             String?
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)
  emailVerifiedAt   DateTime?
  lastLoginAt       DateTime?
  loginAttempts     Int      @default(0)
  lockedUntil       DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  twoFactorSecret   String?
  twoFactorEnabled  Boolean  @default(false)
  profileImage      String?
  address           String?
  city              String?
  state             String?
  zipCode           String?
  country           String?
  dateOfBirth       DateTime?
  ssn               String?  // Encrypted
  emergencyContact  String?
  emergencyPhone    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  investments        Investment[]
  fundInvestments    FundInvestment[]
  distributions      Distribution[]
  documents         Document[]
  notifications     Notification[]
  fundContributions FundContribution[]
  fundDistributions FundDistribution[]
  entities          Entity[]
  entityOwners      EntityOwner[]
  entityDistributions EntityDistribution[]
  insurance         Insurance[]
  propertyTaxes     PropertyTax[]
  waterfallTierDistributions WaterfallTierDistribution[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  auditLogs         AuditLog[]
  fileUploads       FileUpload[]

  @@map("users")
}

model Property {
  id              String   @id @default(cuid())
  propertyId      Int      @unique // External property ID
  name            String
  address         String
  description     String?
  bedrooms        Int
  bathrooms       Int
  price           Float
  squareFeet      Int?
  propertyType    PropertyType @default(SINGLE_FAMILY)
  acquisitionDate DateTime?
  constructionCompletionDate DateTime?
  stabilizationDate DateTime?
  acquisitionPrice Float?
  constructionCost Float?
  totalCost        Float?
  debtAmount       Float?
  debtDetails      String?
  currentValue    Float?
  occupancyRate   Float?
  monthlyRent     Float?
  otherIncome     Float?
  annualExpenses  Float?
  capRate         Float?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  investments     Investment[]
  entityInvestments EntityInvestment[]
  photos          PropertyPhoto[]
  insurance       Insurance[]
  propertyTaxes   PropertyTax[]
  waterfallStructures WaterfallStructure[]

  @@map("properties")
}

model Fund {
  id          String   @id @default(cuid())
  name        String
  description String?
  fundType    FundType @default(REAL_ESTATE)
  targetSize  Float?
  currentSize Float   @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  fundInvestments    FundInvestment[]
  fundContributions  FundContribution[]
  fundDistributions  FundDistribution[]

  @@map("funds")
}

model Investment {
  id                String           @id @default(cuid())
  userId            String
  propertyId        String
  investmentAmount  Float
  ownershipPercentage Float?
  status            InvestmentStatus @default(ACTIVE)
  investmentDate    DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  property      Property       @relation(fields: [propertyId], references: [id])
  distributions Distribution[]

  @@map("investments")
}

model FundInvestment {
  id                String           @id @default(cuid())
  userId            String
  fundId            String
  investmentAmount  Float
  ownershipPercentage Float?
  status            InvestmentStatus @default(ACTIVE)
  investmentDate    DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  user              User             @relation(fields: [userId], references: [id])
  fund              Fund             @relation(fields: [fundId], references: [id])

  @@map("fund_investments")
}

model Distribution {
  id           String   @id @default(cuid())
  investmentId String
  userId       String
  amount       Float
  distributionDate DateTime
  distributionType DistributionType @default(RENTAL_INCOME)
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  investment   Investment @relation(fields: [investmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@map("distributions")
}

// Waterfall Distribution Models
model WaterfallStructure {
  id                    String   @id @default(cuid())
  propertyId            String?
  name                  String
  description           String?
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  property              Property? @relation(fields: [propertyId], references: [id])
  waterfallTiers        WaterfallTier[]
  waterfallDistributions WaterfallDistribution[]

  @@map("waterfall_structures")
}

model WaterfallTier {
  id                    String   @id @default(cuid())
  waterfallStructureId  String
  tierNumber            Int
  tierName              String
  tierType              WaterfallTierType
  priority              Int // Lower number = higher priority
  returnRate            Float? // For preferred returns
  catchUpPercentage     Float? // For catch-up tiers
  promotePercentage     Float? // For promote tiers
  isActive              Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  waterfallStructure    WaterfallStructure @relation(fields: [waterfallStructureId], references: [id], onDelete: Cascade)
  tierDistributions     WaterfallTierDistribution[]

  @@map("waterfall_tiers")
}

model WaterfallTierDistribution {
  id                    String   @id @default(cuid())
  waterfallTierId       String
  entityInvestmentId    String?
  userId                String?
  distributionAmount    Float
  distributionDate      DateTime
  distributionType      WaterfallDistributionType
  description           String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  waterfallTier         WaterfallTier @relation(fields: [waterfallTierId], references: [id], onDelete: Cascade)
  entityInvestment      EntityInvestment? @relation(fields: [entityInvestmentId], references: [id])
  user                  User? @relation(fields: [userId], references: [id])

  @@map("waterfall_tier_distributions")
}

model WaterfallDistribution {
  id                    String   @id @default(cuid())
  waterfallStructureId  String
  totalAmount           Float
  distributionDate      DateTime
  distributionType      WaterfallDistributionType
  description           String?
  isProcessed           Boolean  @default(false)
  oldDebtAmount         Float?   // For refinancing distributions - stores old debt amount
  oldDebtDetails        String?  // For refinancing distributions - stores old debt details
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  waterfallStructure    WaterfallStructure @relation(fields: [waterfallStructureId], references: [id], onDelete: Cascade)
  refinanceClosingFees  RefinanceClosingFee[]

  @@map("waterfall_distributions")
}

// Stores detailed closing fee line items for refinance distributions
model RefinanceClosingFee {
  id                       String   @id @default(cuid())
  waterfallDistributionId  String
  category                 String
  amount                   Float
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  // Relations
  waterfallDistribution    WaterfallDistribution @relation(fields: [waterfallDistributionId], references: [id], onDelete: Cascade)

  @@map("refinance_closing_fees")
}

model FundContribution {
  id           String   @id @default(cuid())
  fundId       String
  userId       String
  amount       Float
  contributionDate DateTime
  contributionType ContributionType @default(CAPITAL_CALL)
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  fund         Fund     @relation(fields: [fundId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@map("fund_contributions")
}

model FundDistribution {
  id           String   @id @default(cuid())
  fundId       String
  userId       String
  amount       Float
  distributionDate DateTime
  distributionType FundDistributionType @default(PROFIT_DISTRIBUTION)
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  fund         Fund     @relation(fields: [fundId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@map("fund_distributions")
}

model Document {
  id           String       @id @default(cuid())
  title        String
  description  String?
  fileName     String
  filePath     String
  fileSize     Int
  mimeType     String
  documentType DocumentType
  entityType   EntityType
  entityId     String
  isPublic     Boolean      @default(false)
  visibleToAdmin Boolean    @default(true)
  visibleToManager Boolean  @default(true)
  visibleToInvestor Boolean @default(true)
  uploadedBy   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  user         User         @relation(fields: [uploadedBy], references: [id])

  @@map("documents")
}

model PropertyPhoto {
  id         String   @id @default(cuid())
  propertyId String
  photoUrl   String
  photoType  PhotoType @default(EXTERIOR)
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  property   Property @relation(fields: [propertyId], references: [id])

  @@map("property_photos")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Entity {
  id            String     @id @default(cuid())
  name          String
  type          EntityType
  address       String?
  taxId         String?
  contactPerson String?
  contactEmail  String?
  contactPhone  String?
  isActive      Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  createdBy     String
  user          User       @relation(fields: [createdBy], references: [id])
  entityInvestments EntityInvestment[]
  entityOwners  EntityOwner[]

  @@map("entities")
}

model EntityInvestment {
  id                String           @id @default(cuid())
  entityId          String
  propertyId        String
  investmentAmount  Float
  ownershipPercentage Float
  status            InvestmentStatus @default(ACTIVE)
  investmentDate    DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  entity            Entity           @relation(fields: [entityId], references: [id])
  property          Property         @relation(fields: [propertyId], references: [id])
  entityDistributions EntityDistribution[]
  waterfallTierDistributions WaterfallTierDistribution[]

  @@map("entity_investments")
}

model EntityOwner {
  id                String   @id @default(cuid())
  entityId          String
  userId            String
  ownershipPercentage Float
  investmentAmount  Float
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  entity            Entity   @relation(fields: [entityId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@map("entity_owners")
}

model EntityDistribution {
  id           String   @id @default(cuid())
  entityInvestmentId String
  userId       String
  amount       Float
  distributionDate DateTime
  distributionType DistributionType @default(RENTAL_INCOME)
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  entityInvestment EntityInvestment @relation(fields: [entityInvestmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@map("entity_distributions")
}

model Insurance {
  id              String   @id @default(cuid())
  propertyId      String
  provider        String
  policyNumber    String
  annualPremium   Float
  coverageAmount  Float
  renewalDate     DateTime
  notes           String?
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("insurance")
}

model PropertyTax {
  id                String   @id @default(cuid())
  propertyId        String
  taxYear           Int
  annualPropertyTax Float
  notes             String?
  createdBy         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  property          Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("property_taxes")
}

// Enums
enum UserRole {
  ADMIN
  INVESTOR
  MANAGER
}

enum PropertyType {
  SINGLE_FAMILY
  MULTI_FAMILY
  COMMERCIAL
  MIXED_USE
  LAND
}

enum FundType {
  REAL_ESTATE
  PRIVATE_EQUITY
  VENTURE_CAPITAL
  HEDGE_FUND
}

enum InvestmentStatus {
  ACTIVE
  SOLD
  FORECLOSED
  PENDING
}

enum DistributionType {
  RENTAL_INCOME
  SALE_PROCEEDS
  REFINANCE
  INSURANCE_SETTLEMENT
  OTHER
}

enum ContributionType {
  CAPITAL_CALL
  ADDITIONAL_INVESTMENT
  ROLLOVER
}

enum FundDistributionType {
  PROFIT_DISTRIBUTION
  RETURN_OF_CAPITAL
  SALE_PROCEEDS
  OTHER
}

enum DocumentType {
  OFFERING_MEMORANDUM
  OPERATING_AGREEMENT
  PPM
  FINANCIAL_STATEMENT
  TAX_DOCUMENT
  INSURANCE
  TITLE_REPORT
  APPRAISAL
  ENVIRONMENTAL_REPORT
  CONTRACT
  OTHER
}

enum EntityType {
  PROPERTY
  FUND
  USER
  LLC
  CORPORATION
  PARTNERSHIP
  TRUST
  OPERATOR
}

enum PhotoType {
  EXTERIOR
  INTERIOR
  AERIAL
  FLOOR_PLAN
  OTHER
}

enum NotificationType {
  DISTRIBUTION
  DOCUMENT_UPLOAD
  PROPERTY_UPDATE
  FUND_UPDATE
  SYSTEM
}

enum WaterfallTierType {
  PREFERRED_RETURN
  CATCH_UP
  PROMOTE
  RESIDUAL
  RETURN_OF_CAPITAL
}

enum WaterfallDistributionType {
  RENTAL_INCOME
  SALE_PROCEEDS
  REFINANCE
  INSURANCE_SETTLEMENT
  RETURN_OF_CAPITAL
  PREFERRED_RETURN
  PROMOTE
  OTHER
}

// Authentication and Security Models
model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  resource    String
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// File Management Models
model FileUpload {
  id            String   @id @default(cuid())
  userId        String
  fileName      String
  originalName  String
  filePath      String
  fileSize      Int
  mimeType      String
  fileHash      String   @unique
  category      FileCategory
  isPublic      Boolean  @default(false)
  metadata      Json?
  uploadedAt    DateTime @default(now())
  expiresAt     DateTime?

  // Relations
  user          User     @relation(fields: [userId], references: [id])

  @@map("file_uploads")
}

model FileShare {
  id          String   @id @default(cuid())
  fileId      String
  sharedBy    String
  sharedWith  String?
  shareToken  String   @unique
  permissions FilePermissions
  expiresAt   DateTime?
  createdAt   DateTime @default(now())

  @@map("file_shares")
}

// Email and Notification Models
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  htmlContent String
  textContent String?
  variables   Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("email_templates")
}

model EmailLog {
  id          String   @id @default(cuid())
  to          String
  from        String
  subject     String
  templateId  String?
  status      EmailStatus
  sentAt      DateTime?
  errorMessage String?
  metadata    Json?
  createdAt   DateTime @default(now())

  @@map("email_logs")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String?
  isEncrypted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

// Additional Enums
enum FileCategory {
  DOCUMENT
  IMAGE
  VIDEO
  AUDIO
  ARCHIVE
  SPREADSHEET
  PRESENTATION
  OTHER
}

enum FilePermissions {
  READ
  WRITE
  DELETE
  SHARE
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  EMAIL_VERIFY
  FILE_UPLOAD
  FILE_DOWNLOAD
  FILE_DELETE
} 