// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User/Investor Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(INVESTOR)
  isActive  Boolean  @default(true)
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String   @default("US")
  dateOfBirth DateTime?
  ssn       String?  // Encrypted in production
  kycStatus KYCStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  investments     Investment[]
  distributions   Distribution[]
  propertyAccess PropertyAccess[]
  fundInvestments FundInvestment[]
  fundDistributions FundDistribution[]
  documents      Document[]
  notifications  Notification[]
  auditLogs      AuditLog[]
  userPreferences UserPreference?

  @@map("users")
}

enum UserRole {
  ADMIN
  INVESTOR
  MANAGER
  SPONSOR
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

// Fund Management
model Fund {
  id          String   @id @default(cuid())
  name        String
  description String?
  fundType    FundType
  targetSize  Float
  minimumInvestment Float
  maximumInvestment Float?
  startDate   DateTime
  endDate     DateTime?
  status      FundStatus @default(ACTIVE)
  sponsorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sponsor         User              @relation("FundSponsor", fields: [sponsorId], references: [id])
  fundInvestments FundInvestment[]
  fundDistributions FundDistribution[]
  properties      FundProperty[]
  documents       Document[]
  waterfallConfigs FundWaterfallConfig[]

  @@map("funds")
}

enum FundType {
  REAL_ESTATE
  PRIVATE_EQUITY
  VENTURE_CAPITAL
  DEBT_FUND
  OPPORTUNITY_ZONE
}

enum FundStatus {
  ACTIVE
  CLOSED
  LIQUIDATING
  TERMINATED
}

// Fund Investment
model FundInvestment {
  id              String   @id @default(cuid())
  fundId          String
  userId          String
  investmentAmount Float
  investmentDate  DateTime
  status          InvestmentStatus @default(ACTIVE)
  preferredReturn Float   @default(0)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  fund            Fund     @relation(fields: [fundId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fundDistributions FundDistribution[]

  @@unique([fundId, userId])
  @@map("fund_investments")
}

// Fund Distribution
model FundDistribution {
  id              String   @id @default(cuid())
  fundId          String
  userId          String
  fundInvestmentId String
  amount          Float
  type            DistributionType
  distributionDate DateTime
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  fund            Fund     @relation(fields: [fundId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fundInvestment  FundInvestment @relation(fields: [fundInvestmentId], references: [id], onDelete: Cascade)

  @@map("fund_distributions")
}

// Fund Property Association
model FundProperty {
  id         String   @id @default(cuid())
  fundId     String
  propertyId String
  ownershipPercentage Float @default(100)
  acquisitionDate DateTime
  acquisitionPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  fund      Fund     @relation(fields: [fundId], references: [id], onDelete: Cascade)
  property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([fundId, propertyId])
  @@map("fund_properties")
}

// Fund Waterfall Configuration
model FundWaterfallConfig {
  id                String   @id @default(cuid())
  fundId            String   @unique
  preferredReturn   Float    @default(8.0)
  promoteThreshold  Float    @default(80.0)
  promotePercentage Float    @default(20.0)
  catchUpPercentage Float    @default(100.0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  fund Fund @relation(fields: [fundId], references: [id], onDelete: Cascade)

  @@map("fund_waterfall_configs")
}

// Property Management (enhanced)
model Property {
  id          String   @id @default(cuid())
  propertyId  Int      @unique // External property ID from existing system
  name        String
  address     String
  description String?
  bedrooms    Int
  bathrooms   Int
  price       Float
  squareFeet  Int?
  school      String
  photo       String?
  leaseTerms  DateTime
  latitude    Float?
  longitude   Float?
  propertyType PropertyType @default(SINGLE_FAMILY)
  acquisitionDate DateTime?
  acquisitionPrice Float?
  currentValue Float?
  occupancyRate Float?
  monthlyRent Float?
  annualExpenses Float?
  capRate     Float?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Investment Relations
  investments     Investment[]
  distributions   Distribution[]
  propertyAccess PropertyAccess[]
  waterfallConfigs WaterfallConfig[]
  financialCalculations FinancialCalculation[]
  fundProperties  FundProperty[]
  documents       Document[]
  propertyExpenses PropertyExpense[]
  propertyIncome  PropertyIncome[]

  @@map("properties")
}

enum PropertyType {
  SINGLE_FAMILY
  MULTI_FAMILY
  TOWNHOUSE
  CONDO
  COMMERCIAL
  LAND
  MIXED_USE
}

// Property Income Tracking
model PropertyIncome {
  id          String   @id @default(cuid())
  propertyId  String
  type        IncomeType
  amount      Float
  date        DateTime
  description String?
  tenantId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_income")
}

enum IncomeType {
  RENT
  LATE_FEES
  UTILITIES
  PARKING
  STORAGE
  OTHER
}

// Property Expense Tracking
model PropertyExpense {
  id          String   @id @default(cuid())
  propertyId  String
  type        ExpenseType
  amount      Float
  date        DateTime
  description String?
  vendor      String?
  invoiceNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_expenses")
}

enum ExpenseType {
  MORTGAGE
  PROPERTY_TAX
  INSURANCE
  MAINTENANCE
  REPAIRS
  UTILITIES
  PROPERTY_MANAGEMENT
  LEGAL
  ACCOUNTING
  OTHER
}

// Investment Management (enhanced)
model Investment {
  id              String   @id @default(cuid())
  propertyId      String
  userId          String
  investmentAmount Float
  preferredReturn Float   @default(0) // Annual preferred return percentage
  startDate       DateTime
  endDate         DateTime?
  status          InvestmentStatus @default(ACTIVE)
  investmentType  InvestmentType @default(EQUITY)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  distributions Distribution[]

  @@unique([propertyId, userId])
  @@map("investments")
}

enum InvestmentStatus {
  ACTIVE
  SOLD
  TRANSFERRED
  CANCELLED
  PENDING
}

enum InvestmentType {
  EQUITY
  DEBT
  PREFERRED_EQUITY
  MEZZANINE
}

// Distribution Management (enhanced)
model Distribution {
  id              String   @id @default(cuid())
  propertyId      String
  userId          String
  investmentId    String
  amount          Float
  type            DistributionType
  distributionDate DateTime
  description     String?
  taxYear         Int?
  is1099Reported  Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  property    Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  investment  Investment  @relation(fields: [investmentId], references: [id], onDelete: Cascade)

  @@map("distributions")
}

enum DistributionType {
  PREFERRED_RETURN
  PROFIT_SHARE
  RETURN_OF_CAPITAL
  SALE_PROCEEDS
  REFINANCE_PROCEEDS
  PARTIAL_SALE
}

// Waterfall Configuration (enhanced)
model WaterfallConfig {
  id                String   @id @default(cuid())
  propertyId        String   @unique
  preferredReturn   Float    @default(8.0) // Default 8% preferred return
  promoteThreshold  Float    @default(80.0) // 80/20 split after preferred return
  promotePercentage Float    @default(20.0) // 20% promote to sponsor
  catchUpPercentage Float    @default(100.0) // 100% catch-up to sponsor
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("waterfall_configs")
}

// Property Access Control
model PropertyAccess {
  id         String   @id @default(cuid())
  propertyId String
  userId     String
  accessType AccessType @default(VIEW)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([propertyId, userId])
  @@map("property_access")
}

enum AccessType {
  VIEW
  EDIT
  ADMIN
}

// Document Management
model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  documentType DocumentType
  entityType  EntityType
  entityId    String
  uploadedBy  String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [uploadedBy], references: [id])

  @@map("documents")
}

enum DocumentType {
  OPERATING_AGREEMENT
  PPM
  SUBSCRIPTION_AGREEMENT
  FINANCIAL_STATEMENT
  TAX_DOCUMENT
  INSURANCE
  TITLE_INSURANCE
  SURVEY
  APPRAISAL
  ENVIRONMENTAL_REPORT
  LEASE_AGREEMENT
  CONTRACT
  INVOICE
  RECEIPT
  OTHER
}

enum EntityType {
  PROPERTY
  FUND
  USER
  INVESTMENT
}

// Notification System
model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String
  type        NotificationType
  isRead      Boolean  @default(false)
  entityType  EntityType?
  entityId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  DISTRIBUTION
  DOCUMENT_UPLOAD
  PROPERTY_UPDATE
  FINANCIAL_REPORT
  SYSTEM_ALERT
  KYC_UPDATE
}

// User Preferences
model UserPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  smsNotifications      Boolean  @default(false)
  dashboardLayout       Json?    // Store dashboard layout preferences
  currency              String   @default("USD")
  timezone              String   @default("America/New_York")
  dateFormat            String   @default("MM/DD/YYYY")
  numberFormat          String   @default("en-US")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// Audit Logging
model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  entityType  EntityType
  entityId    String
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Financial Calculations Cache
model FinancialCalculation {
  id              String   @id @default(cuid())
  propertyId      String
  calculationType CalculationType
  calculationDate DateTime
  data            Json     // Store calculation results as JSON
  createdAt       DateTime @default(now())

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([propertyId, calculationType, calculationDate])
  @@map("financial_calculations")
}

enum CalculationType {
  IRR
  CASH_ON_CASH
  TOTAL_RETURN
  WATERFALL
  DISTRIBUTION_SCHEDULE
  CAP_RATE
  GRM
  DSCR
  EQUITY_MULTIPLE
}

// Tax Reporting
model TaxReport {
  id          String   @id @default(cuid())
  userId      String
  taxYear     Int
  reportType  TaxReportType
  fileName    String
  filePath    String
  isGenerated Boolean  @default(false)
  generatedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taxYear, reportType])
  @@map("tax_reports")
}

enum TaxReportType {
  SCHEDULE_K1
  FORM_1099
  ANNUAL_STATEMENT
  QUARTERLY_STATEMENT
}

// Reporting Templates
model ReportTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  template    Json     // Store report template configuration
  isActive    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation("ReportTemplateCreator", fields: [createdBy], references: [id])

  @@map("report_templates")
} 